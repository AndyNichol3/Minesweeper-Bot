design of the bot

randomly generate the first index and use that to do the initial game

path through all of the initial circle and revealed squares
identify all of the "corner 1's" to use

given a known mine location, 
  if an adjacent unmarked location is touching a 1, than the unmarked location is not a mine



  given a mine location as an input

  access the 8 sorrunding tiles. store the ones = 1 in a revealed tally

if board[i-1][j-1] ==



// all bot code should exist here; the entire point should be to calculate
// the inputs for row and columns

// store a map of saved moves
// while loop to mark them as flags

// find the safe moves
// while loop to reveal them

// check if the game is over
// if no, then repeat

// end bot code

// }

// until games over
// calculate squares to input
// run through inputs until out

// CODE WAS HERE



/*
bool nextMoves = false;
while (!nextMoves) {
  int changes = 0;
  for (const auto &mineLocation : knownMines) {
    int defIndexX[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int defIndexY[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
    // fix the indexing because this jumps all over the palce
    // make it go in a circle and not all around
    for (int index = -1; index < 7; index++) {
      // bool
      int x = mineLocation.first + defIndexX[index];
      int y = mineLocation.second + defIndexY[index];

      if (x < 0 || x > maxNumberOfRows - 1 || y < 0 ||
          y > maxNumberOfColumns - 1) {
        continue;
      }
      bool check = boolGameBoard[x][y];

      int x2 = mineLocation.first + defIndexX[index + 1];
      int y2 = mineLocation.second + defIndexY[index + 1];
      if (x2 < 0 || x2 > maxNumberOfRows - 1 || y2 < 0 ||
          y2 > maxNumberOfColumns - 1) {
        continue;
      }

      bool check2 = boolGameBoard[x2][y2];
      if (check && !check2) {
        cout << endl << "ENTERED" << endl;
        changes++;
        if (!check) {
          // check location is next coord

          userRow = x, userCol = y;
          round++;
          win = completeBotRound(maxNumberOfColumns, maxNumberOfRows,
                                 boolGameBoard, gameBoard, maxNumOfMines,
                                 userRow, userCol, round);
          if (win == true) {
            break;
          }
        } else {
          // check location is next coord

          userRow = x2, userCol = y2;
          round++;
          win = completeBotRound(maxNumberOfColumns, maxNumberOfRows,
                                 boolGameBoard, gameBoard, maxNumOfMines,
                                 userRow, userCol, round);
          if (win == true) {
            break;
          }
        }
      }
    }
  }
  if (changes == 0) {
    nextMoves = true;
  }
}
*/




// given a tile
// if the tile is not revealed continue
// if the tile == 0 continue
// give the tile
  // check all 8 tiles around it,
  // tally the number of know mines in those 8
    // if tally == value of the tile
      // anything adjacent shoudl be valid to click
        // cycle through 8 adjacent tiles
          // if the tile is not revealed and is in bounds, reveal




            /*
            cout << endl << "TEST SET 3" << endl;
           // set<pair<int, int>>
            knownMines =
            calculateInitialKnownMines(maxNumberOfColumns, maxNumberOfRows,
                                       boolGameBoard, gameBoard, boolFlagLocation);
            for (const auto &mineLocation : knownMines) {
              std::cout << "Mine at coordinates (" << mineLocation.second << ", "
                        << maxNumberOfRows - 1 - mineLocation.first << ")\n";
            }
            */
            // test 3
            // given a tile
            // if the tile is not revealed continue
            // if the tile == 0 continue
            // given the remaing tile,
            // if tile int - known mines in its proximity = 0
            // reveal all tiles in proximity
            // if tile is known mine, skip
            /*
            for (int i = 0; i < maxNumberOfRows; ++i) {
              for (int j = 0; j < maxNumberOfColumns; ++j) {
                if (boolGameBoard[i][j] == false) {
                  continue;
                }
                if (gameBoard[i][j] == 0) {
                  continue;
                }

                int knownMineTally = 0;
                int defIndexX[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
                int defIndexY[8] = {-1, 0, 1, -1, 1, -1, 0, 1};

                for (int index = 0; index < 8; index++) {
                  int X = i + defIndexX[index];
                  int Y = j + defIndexY[index];

                  pair<int, int> currentLoc = {X, Y};
                  if (knownMines.find(currentLoc) != knownMines.end()) {
                    knownMineTally++;
                  }
                }




              }
            }

            */

            /*

            for (int i = 0; i < maxNumberOfRows; ++i) {
              for (int j = 0; j < maxNumberOfColumns; ++j) {
                if (boolGameBoard[i][j] == false) {
                  continue;
                }

                int defIndexX[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
                int defIndexY[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
                int knownTally = 0;
                set<pair<int, int>> potentialMines;

                for (int index = 0; index < 8; index++) {
                  int X = i + defIndexX[index];
                  int Y = j + defIndexY[index];

                  if (X < 0 || Y < 0 || X >= maxNumberOfRows || Y >= maxNumberOfColumns) {
                    knownTally++;
                    continue;
                  }

                  if (boolGameBoard[X][Y] == true) {
                    knownTally++;
                    continue;
                  }

                  pair<int, int> test = {X, Y};
                  if (knownMines.find(test) != knownMines.end()) {
                    knownTally++;
                    continue;
                  }

                  potentialMines.insert(test);
                }

                int leftOver = 8 - knownTally;
                if (leftOver != gameBoard[i][j]) {
                  continue;
                }

                for (const auto &mine : potentialMines) {
                  if (knownMines.find(mine) != knownMines.end()) {
                    continue;
                  }
                  knownMines.insert(mine);
                }
              }
            }

            */

            // given a tile
            // if the tile is not revealed continue
            // if the tile == 0 continue
            // give the tile
            // check all 8 tiles around it,
            // tally the number of know mines in those 8
            // if tally == value of the tile
            // anything adjacent shoudl be valid to click
            // cycle through 8 adjacent tiles
            // if the tile is not revealed and is in bounds, reveal

            // new mine calculation function

            // given a revealed tile
            // if the tile int = number of unrevealed tiles in proximity
            // all the unrevealed tiles are mines
            // check to see if mine is in mines
            // if not, store it in mines
            /*

            knownMines = botCheckForMines(knownMines, maxNumberOfRows, maxNumberOfColumns,
                                          round, maxNumOfMines, boolGameBoard, gameBoard,
                                          boolFlagLocation);

            cout << endl << "TEST SET 3" << endl;
            for (const auto &mineLocation : knownMines) {
              std::cout << "Mine at coordinates (" << mineLocation.second << ", "
                        << maxNumberOfRows - 1 - mineLocation.first << ")\n";
            }
            */

            //
            // loop here